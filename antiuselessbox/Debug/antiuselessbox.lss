
antiuselessbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000156  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001c7  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000128  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016a  00000000  00000000  000004f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b5  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <startTimer1>:
}

void startTimer1()
{
	//Normal-Mode
	TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
  7c:	8f b5       	in	r24, 0x2f	; 47
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	87 7e       	andi	r24, 0xE7	; 231
  86:	8e bd       	out	0x2e, r24	; 46
		
	//Prescaler 64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
  88:	8e b5       	in	r24, 0x2e	; 46
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << CS12));
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	8e bd       	out	0x2e, r24	; 46
		
	TCNT1 = 0;
  94:	1d bc       	out	0x2d, r1	; 45
  96:	1c bc       	out	0x2c, r1	; 44
  98:	08 95       	ret

0000009a <stopTimer1>:
}

void stopTimer1()
{
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));	//Stop the timer
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	88 7f       	andi	r24, 0xF8	; 248
  9e:	8e bd       	out	0x2e, r24	; 46
  a0:	08 95       	ret

000000a2 <executePing>:
{
}

void executePing()
{
	PING_DDR |= (1 << PING_PIN);
  a2:	d0 9a       	sbi	0x1a, 0	; 26
	PING_OUTPUT_PORT |= (1 << PING_PIN);	//Set pin high
  a4:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	81 ee       	ldi	r24, 0xE1	; 225
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <executePing+0x8>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <executePing+0xe>
  b0:	00 00       	nop
	_delay_ms(5);
	PING_OUTPUT_PORT &= ~(1 << PING_PIN);	//Set pin low
  b2:	d8 98       	cbi	0x1b, 0	; 27
	PING_DDR &= ~(1 << PING_PIN);	//Set pin to input
  b4:	d0 98       	cbi	0x1a, 0	; 26
	
	while(!(PING_INPUT_PORT & (1 << PING_PIN)))	//Wait until the pin is high
  b6:	c8 9b       	sbis	0x19, 0	; 25
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <executePing+0x14>
	{
		
	}
	startTimer1();
  ba:	0e 94 3e 00 	call	0x7c	; 0x7c <startTimer1>
	
	while(PING_INPUT_PORT & (1 << PING_PIN))	//Wait until the pin is low again
  be:	c8 99       	sbic	0x19, 0	; 25
  c0:	fe cf       	rjmp	.-4      	; 0xbe <executePing+0x1c>
	{
		
	}
	stopTimer1();
  c2:	0e 94 4d 00 	call	0x9a	; 0x9a <stopTimer1>
	distance = TCNT1;
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	9d b5       	in	r25, 0x2d	; 45
  ca:	90 93 61 00 	sts	0x0061, r25
  ce:	80 93 60 00 	sts	0x0060, r24
	TCNT1 = 0;
  d2:	1d bc       	out	0x2d, r1	; 45
  d4:	1c bc       	out	0x2c, r1	; 44
  d6:	08 95       	ret

000000d8 <main>:
	
	
    /* Replace with your application code */
    while (1) 
    {
		executePing();
  d8:	0e 94 51 00 	call	0xa2	; 0xa2 <executePing>
    }
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <main>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
