
antiuselessbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000243  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000171  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000186  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c9  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  74:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initUSART>:

double distance = 0;

void initUSART()
{
	UBRRH = 0;
  7c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
  7e:	83 e3       	ldi	r24, 0x33	; 51
  80:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ((1<<TXEN));
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = ((1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1));	//Asynchron 8N1
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << UDRIE);	//no parity, UMSEL for async operation
  8a:	55 9a       	sbi	0x0a, 5	; 10
  8c:	08 95       	ret

0000008e <usartTransmit>:
}

void usartTransmit(unsigned char data)
{
	while(!(UCSRA & (1 << UDRE)))
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <usartTransmit>
	{
		
	}
	UDR = data;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <startTimer1>:
}

void startTimer1()
{
	//Normal-Mode
	TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
  96:	8f b5       	in	r24, 0x2f	; 47
  98:	8c 7f       	andi	r24, 0xFC	; 252
  9a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
  9c:	8e b5       	in	r24, 0x2e	; 46
  9e:	87 7e       	andi	r24, 0xE7	; 231
  a0:	8e bd       	out	0x2e, r24	; 46
		
	//Prescaler 64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << CS12));
  a8:	8e b5       	in	r24, 0x2e	; 46
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	8e bd       	out	0x2e, r24	; 46
		
	TCNT1 = 0;
  ae:	1d bc       	out	0x2d, r1	; 45
  b0:	1c bc       	out	0x2c, r1	; 44
  b2:	08 95       	ret

000000b4 <stopTimer1>:
}

void stopTimer1()
{
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));	//Stop the timer
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	8e bd       	out	0x2e, r24	; 46
  ba:	08 95       	ret

000000bc <executePing>:
	UDR = data;
}

void executePing()
{
	PING_DDR |= (1 << PING_PIN);
  bc:	d0 9a       	sbi	0x1a, 0	; 26
	PING_OUTPUT_PORT |= (1 << PING_PIN);	//Set pin high
  be:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	97 e2       	ldi	r25, 0x27	; 39
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <executePing+0x8>
  c8:	00 c0       	rjmp	.+0      	; 0xca <executePing+0xe>
  ca:	00 00       	nop
	_delay_ms(5);
	PING_OUTPUT_PORT &= ~(1 << PING_PIN);	//Set pin low
  cc:	d8 98       	cbi	0x1b, 0	; 27
	PING_DDR &= ~(1 << PING_PIN);	//Set pin to input
  ce:	d0 98       	cbi	0x1a, 0	; 26
	
	while(!(PING_INPUT_PORT & (1 << PING_PIN)))	//Wait until the pin is high
  d0:	c8 9b       	sbis	0x19, 0	; 25
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <executePing+0x14>
	{
		
	}
	startTimer1();
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <startTimer1>
	
	while(PING_INPUT_PORT & (1 << PING_PIN))	//Wait until the pin is low again
  d8:	c8 99       	sbic	0x19, 0	; 25
  da:	fe cf       	rjmp	.-4      	; 0xd8 <executePing+0x1c>
	{
		
	}
	stopTimer1();
  dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <stopTimer1>
	distance = TCNT1 * 0.1724;	//Value in microseconds
  e0:	6c b5       	in	r22, 0x2c	; 44
  e2:	7d b5       	in	r23, 0x2d	; 45
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 ad 00 	call	0x15a	; 0x15a <__floatunsisf>
  ec:	20 ea       	ldi	r18, 0xA0	; 160
  ee:	39 e8       	ldi	r19, 0x89	; 137
  f0:	40 e3       	ldi	r20, 0x30	; 48
  f2:	5e e3       	ldi	r21, 0x3E	; 62
  f4:	0e 94 0e 01 	call	0x21c	; 0x21c <__mulsf3>
  f8:	60 93 60 00 	sts	0x0060, r22
  fc:	70 93 61 00 	sts	0x0061, r23
 100:	80 93 62 00 	sts	0x0062, r24
 104:	90 93 63 00 	sts	0x0063, r25
	TCNT1 = 0;
 108:	1d bc       	out	0x2d, r1	; 45
 10a:	1c bc       	out	0x2c, r1	; 44
 10c:	08 95       	ret

0000010e <main>:
	//TCNT1 = 0;	
}

int main(void)	
{
	initUSART();
 10e:	0e 94 3e 00 	call	0x7c	; 0x7c <initUSART>
	
    /* Replace with your application code */
    while (1) 
    {
		executePing();
 112:	0e 94 5e 00 	call	0xbc	; 0xbc <executePing>
		
		if(distance <= 30)
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 ef       	ldi	r20, 0xF0	; 240
 11c:	51 e4       	ldi	r21, 0x41	; 65
 11e:	60 91 60 00 	lds	r22, 0x0060
 122:	70 91 61 00 	lds	r23, 0x0061
 126:	80 91 62 00 	lds	r24, 0x0062
 12a:	90 91 63 00 	lds	r25, 0x0063
 12e:	0e 94 a8 00 	call	0x150	; 0x150 <__cmpsf2>
 132:	18 16       	cp	r1, r24
 134:	1c f0       	brlt	.+6      	; 0x13c <main+0x2e>
		{
			usartTransmit('A');
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	0e 94 47 00 	call	0x8e	; 0x8e <usartTransmit>
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x34>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x3e>
 14c:	00 00       	nop
 14e:	e1 cf       	rjmp	.-62     	; 0x112 <main+0x4>

00000150 <__cmpsf2>:
 150:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__fp_cmp>
 154:	08 f4       	brcc	.+2      	; 0x158 <__cmpsf2+0x8>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret

0000015a <__floatunsisf>:
 15a:	e8 94       	clt
 15c:	09 c0       	rjmp	.+18     	; 0x170 <__floatsisf+0x12>

0000015e <__floatsisf>:
 15e:	97 fb       	bst	r25, 7
 160:	3e f4       	brtc	.+14     	; 0x170 <__floatsisf+0x12>
 162:	90 95       	com	r25
 164:	80 95       	com	r24
 166:	70 95       	com	r23
 168:	61 95       	neg	r22
 16a:	7f 4f       	sbci	r23, 0xFF	; 255
 16c:	8f 4f       	sbci	r24, 0xFF	; 255
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	99 23       	and	r25, r25
 172:	a9 f0       	breq	.+42     	; 0x19e <__floatsisf+0x40>
 174:	f9 2f       	mov	r31, r25
 176:	96 e9       	ldi	r25, 0x96	; 150
 178:	bb 27       	eor	r27, r27
 17a:	93 95       	inc	r25
 17c:	f6 95       	lsr	r31
 17e:	87 95       	ror	r24
 180:	77 95       	ror	r23
 182:	67 95       	ror	r22
 184:	b7 95       	ror	r27
 186:	f1 11       	cpse	r31, r1
 188:	f8 cf       	rjmp	.-16     	; 0x17a <__floatsisf+0x1c>
 18a:	fa f4       	brpl	.+62     	; 0x1ca <__floatsisf+0x6c>
 18c:	bb 0f       	add	r27, r27
 18e:	11 f4       	brne	.+4      	; 0x194 <__floatsisf+0x36>
 190:	60 ff       	sbrs	r22, 0
 192:	1b c0       	rjmp	.+54     	; 0x1ca <__floatsisf+0x6c>
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	8f 4f       	sbci	r24, 0xFF	; 255
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	16 c0       	rjmp	.+44     	; 0x1ca <__floatsisf+0x6c>
 19e:	88 23       	and	r24, r24
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <__floatsisf+0x48>
 1a2:	96 e9       	ldi	r25, 0x96	; 150
 1a4:	11 c0       	rjmp	.+34     	; 0x1c8 <__floatsisf+0x6a>
 1a6:	77 23       	and	r23, r23
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <__floatsisf+0x54>
 1aa:	9e e8       	ldi	r25, 0x8E	; 142
 1ac:	87 2f       	mov	r24, r23
 1ae:	76 2f       	mov	r23, r22
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <__floatsisf+0x5e>
 1b2:	66 23       	and	r22, r22
 1b4:	71 f0       	breq	.+28     	; 0x1d2 <__floatsisf+0x74>
 1b6:	96 e8       	ldi	r25, 0x86	; 134
 1b8:	86 2f       	mov	r24, r22
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	2a f0       	brmi	.+10     	; 0x1ca <__floatsisf+0x6c>
 1c0:	9a 95       	dec	r25
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	88 1f       	adc	r24, r24
 1c8:	da f7       	brpl	.-10     	; 0x1c0 <__floatsisf+0x62>
 1ca:	88 0f       	add	r24, r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	97 f9       	bld	r25, 7
 1d2:	08 95       	ret

000001d4 <__fp_cmp>:
 1d4:	99 0f       	add	r25, r25
 1d6:	00 08       	sbc	r0, r0
 1d8:	55 0f       	add	r21, r21
 1da:	aa 0b       	sbc	r26, r26
 1dc:	e0 e8       	ldi	r30, 0x80	; 128
 1de:	fe ef       	ldi	r31, 0xFE	; 254
 1e0:	16 16       	cp	r1, r22
 1e2:	17 06       	cpc	r1, r23
 1e4:	e8 07       	cpc	r30, r24
 1e6:	f9 07       	cpc	r31, r25
 1e8:	c0 f0       	brcs	.+48     	; 0x21a <__fp_cmp+0x46>
 1ea:	12 16       	cp	r1, r18
 1ec:	13 06       	cpc	r1, r19
 1ee:	e4 07       	cpc	r30, r20
 1f0:	f5 07       	cpc	r31, r21
 1f2:	98 f0       	brcs	.+38     	; 0x21a <__fp_cmp+0x46>
 1f4:	62 1b       	sub	r22, r18
 1f6:	73 0b       	sbc	r23, r19
 1f8:	84 0b       	sbc	r24, r20
 1fa:	95 0b       	sbc	r25, r21
 1fc:	39 f4       	brne	.+14     	; 0x20c <__fp_cmp+0x38>
 1fe:	0a 26       	eor	r0, r26
 200:	61 f0       	breq	.+24     	; 0x21a <__fp_cmp+0x46>
 202:	23 2b       	or	r18, r19
 204:	24 2b       	or	r18, r20
 206:	25 2b       	or	r18, r21
 208:	21 f4       	brne	.+8      	; 0x212 <__fp_cmp+0x3e>
 20a:	08 95       	ret
 20c:	0a 26       	eor	r0, r26
 20e:	09 f4       	brne	.+2      	; 0x212 <__fp_cmp+0x3e>
 210:	a1 40       	sbci	r26, 0x01	; 1
 212:	a6 95       	lsr	r26
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	81 1d       	adc	r24, r1
 218:	81 1d       	adc	r24, r1
 21a:	08 95       	ret

0000021c <__mulsf3>:
 21c:	0e 94 21 01 	call	0x242	; 0x242 <__mulsf3x>
 220:	0c 94 92 01 	jmp	0x324	; 0x324 <__fp_round>
 224:	0e 94 84 01 	call	0x308	; 0x308 <__fp_pscA>
 228:	38 f0       	brcs	.+14     	; 0x238 <__mulsf3+0x1c>
 22a:	0e 94 8b 01 	call	0x316	; 0x316 <__fp_pscB>
 22e:	20 f0       	brcs	.+8      	; 0x238 <__mulsf3+0x1c>
 230:	95 23       	and	r25, r21
 232:	11 f0       	breq	.+4      	; 0x238 <__mulsf3+0x1c>
 234:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__fp_inf>
 238:	0c 94 81 01 	jmp	0x302	; 0x302 <__fp_nan>
 23c:	11 24       	eor	r1, r1
 23e:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__fp_szero>

00000242 <__mulsf3x>:
 242:	0e 94 a3 01 	call	0x346	; 0x346 <__fp_split3>
 246:	70 f3       	brcs	.-36     	; 0x224 <__mulsf3+0x8>

00000248 <__mulsf3_pse>:
 248:	95 9f       	mul	r25, r21
 24a:	c1 f3       	breq	.-16     	; 0x23c <__mulsf3+0x20>
 24c:	95 0f       	add	r25, r21
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	55 1f       	adc	r21, r21
 252:	62 9f       	mul	r22, r18
 254:	f0 01       	movw	r30, r0
 256:	72 9f       	mul	r23, r18
 258:	bb 27       	eor	r27, r27
 25a:	f0 0d       	add	r31, r0
 25c:	b1 1d       	adc	r27, r1
 25e:	63 9f       	mul	r22, r19
 260:	aa 27       	eor	r26, r26
 262:	f0 0d       	add	r31, r0
 264:	b1 1d       	adc	r27, r1
 266:	aa 1f       	adc	r26, r26
 268:	64 9f       	mul	r22, r20
 26a:	66 27       	eor	r22, r22
 26c:	b0 0d       	add	r27, r0
 26e:	a1 1d       	adc	r26, r1
 270:	66 1f       	adc	r22, r22
 272:	82 9f       	mul	r24, r18
 274:	22 27       	eor	r18, r18
 276:	b0 0d       	add	r27, r0
 278:	a1 1d       	adc	r26, r1
 27a:	62 1f       	adc	r22, r18
 27c:	73 9f       	mul	r23, r19
 27e:	b0 0d       	add	r27, r0
 280:	a1 1d       	adc	r26, r1
 282:	62 1f       	adc	r22, r18
 284:	83 9f       	mul	r24, r19
 286:	a0 0d       	add	r26, r0
 288:	61 1d       	adc	r22, r1
 28a:	22 1f       	adc	r18, r18
 28c:	74 9f       	mul	r23, r20
 28e:	33 27       	eor	r19, r19
 290:	a0 0d       	add	r26, r0
 292:	61 1d       	adc	r22, r1
 294:	23 1f       	adc	r18, r19
 296:	84 9f       	mul	r24, r20
 298:	60 0d       	add	r22, r0
 29a:	21 1d       	adc	r18, r1
 29c:	82 2f       	mov	r24, r18
 29e:	76 2f       	mov	r23, r22
 2a0:	6a 2f       	mov	r22, r26
 2a2:	11 24       	eor	r1, r1
 2a4:	9f 57       	subi	r25, 0x7F	; 127
 2a6:	50 40       	sbci	r21, 0x00	; 0
 2a8:	9a f0       	brmi	.+38     	; 0x2d0 <__mulsf3_pse+0x88>
 2aa:	f1 f0       	breq	.+60     	; 0x2e8 <__mulsf3_pse+0xa0>
 2ac:	88 23       	and	r24, r24
 2ae:	4a f0       	brmi	.+18     	; 0x2c2 <__mulsf3_pse+0x7a>
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	bb 1f       	adc	r27, r27
 2b6:	66 1f       	adc	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	88 1f       	adc	r24, r24
 2bc:	91 50       	subi	r25, 0x01	; 1
 2be:	50 40       	sbci	r21, 0x00	; 0
 2c0:	a9 f7       	brne	.-22     	; 0x2ac <__mulsf3_pse+0x64>
 2c2:	9e 3f       	cpi	r25, 0xFE	; 254
 2c4:	51 05       	cpc	r21, r1
 2c6:	80 f0       	brcs	.+32     	; 0x2e8 <__mulsf3_pse+0xa0>
 2c8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__fp_inf>
 2cc:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__fp_szero>
 2d0:	5f 3f       	cpi	r21, 0xFF	; 255
 2d2:	e4 f3       	brlt	.-8      	; 0x2cc <__mulsf3_pse+0x84>
 2d4:	98 3e       	cpi	r25, 0xE8	; 232
 2d6:	d4 f3       	brlt	.-12     	; 0x2cc <__mulsf3_pse+0x84>
 2d8:	86 95       	lsr	r24
 2da:	77 95       	ror	r23
 2dc:	67 95       	ror	r22
 2de:	b7 95       	ror	r27
 2e0:	f7 95       	ror	r31
 2e2:	e7 95       	ror	r30
 2e4:	9f 5f       	subi	r25, 0xFF	; 255
 2e6:	c1 f7       	brne	.-16     	; 0x2d8 <__mulsf3_pse+0x90>
 2e8:	fe 2b       	or	r31, r30
 2ea:	88 0f       	add	r24, r24
 2ec:	91 1d       	adc	r25, r1
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	97 f9       	bld	r25, 7
 2f4:	08 95       	ret

000002f6 <__fp_inf>:
 2f6:	97 f9       	bld	r25, 7
 2f8:	9f 67       	ori	r25, 0x7F	; 127
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	08 95       	ret

00000302 <__fp_nan>:
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	08 95       	ret

00000308 <__fp_pscA>:
 308:	00 24       	eor	r0, r0
 30a:	0a 94       	dec	r0
 30c:	16 16       	cp	r1, r22
 30e:	17 06       	cpc	r1, r23
 310:	18 06       	cpc	r1, r24
 312:	09 06       	cpc	r0, r25
 314:	08 95       	ret

00000316 <__fp_pscB>:
 316:	00 24       	eor	r0, r0
 318:	0a 94       	dec	r0
 31a:	12 16       	cp	r1, r18
 31c:	13 06       	cpc	r1, r19
 31e:	14 06       	cpc	r1, r20
 320:	05 06       	cpc	r0, r21
 322:	08 95       	ret

00000324 <__fp_round>:
 324:	09 2e       	mov	r0, r25
 326:	03 94       	inc	r0
 328:	00 0c       	add	r0, r0
 32a:	11 f4       	brne	.+4      	; 0x330 <__fp_round+0xc>
 32c:	88 23       	and	r24, r24
 32e:	52 f0       	brmi	.+20     	; 0x344 <__fp_round+0x20>
 330:	bb 0f       	add	r27, r27
 332:	40 f4       	brcc	.+16     	; 0x344 <__fp_round+0x20>
 334:	bf 2b       	or	r27, r31
 336:	11 f4       	brne	.+4      	; 0x33c <__fp_round+0x18>
 338:	60 ff       	sbrs	r22, 0
 33a:	04 c0       	rjmp	.+8      	; 0x344 <__fp_round+0x20>
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	08 95       	ret

00000346 <__fp_split3>:
 346:	57 fd       	sbrc	r21, 7
 348:	90 58       	subi	r25, 0x80	; 128
 34a:	44 0f       	add	r20, r20
 34c:	55 1f       	adc	r21, r21
 34e:	59 f0       	breq	.+22     	; 0x366 <__fp_splitA+0x10>
 350:	5f 3f       	cpi	r21, 0xFF	; 255
 352:	71 f0       	breq	.+28     	; 0x370 <__fp_splitA+0x1a>
 354:	47 95       	ror	r20

00000356 <__fp_splitA>:
 356:	88 0f       	add	r24, r24
 358:	97 fb       	bst	r25, 7
 35a:	99 1f       	adc	r25, r25
 35c:	61 f0       	breq	.+24     	; 0x376 <__fp_splitA+0x20>
 35e:	9f 3f       	cpi	r25, 0xFF	; 255
 360:	79 f0       	breq	.+30     	; 0x380 <__fp_splitA+0x2a>
 362:	87 95       	ror	r24
 364:	08 95       	ret
 366:	12 16       	cp	r1, r18
 368:	13 06       	cpc	r1, r19
 36a:	14 06       	cpc	r1, r20
 36c:	55 1f       	adc	r21, r21
 36e:	f2 cf       	rjmp	.-28     	; 0x354 <__fp_split3+0xe>
 370:	46 95       	lsr	r20
 372:	f1 df       	rcall	.-30     	; 0x356 <__fp_splitA>
 374:	08 c0       	rjmp	.+16     	; 0x386 <__fp_splitA+0x30>
 376:	16 16       	cp	r1, r22
 378:	17 06       	cpc	r1, r23
 37a:	18 06       	cpc	r1, r24
 37c:	99 1f       	adc	r25, r25
 37e:	f1 cf       	rjmp	.-30     	; 0x362 <__fp_splitA+0xc>
 380:	86 95       	lsr	r24
 382:	71 05       	cpc	r23, r1
 384:	61 05       	cpc	r22, r1
 386:	08 94       	sec
 388:	08 95       	ret

0000038a <__fp_zero>:
 38a:	e8 94       	clt

0000038c <__fp_szero>:
 38c:	bb 27       	eor	r27, r27
 38e:	66 27       	eor	r22, r22
 390:	77 27       	eor	r23, r23
 392:	cb 01       	movw	r24, r22
 394:	97 f9       	bld	r25, 7
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
